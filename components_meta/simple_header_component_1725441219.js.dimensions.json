{
    "id": "simple_header_component_1725441219",
    "name": "simple-header-component",
    "type": "containerComponent",
    "metadata": {
        "markdownText": "\n<template>\n  <div class=\"container mx-auto p-4 bg-opacity-20 bg-white backdrop-filter backdrop-blur-lg rounded-lg shadow-lg\">\n    <h1 class=\"text-3xl font-bold mb-4 text-blue-500\">WETH Wrapper</h1>\n    <div class=\"mb-4\">\n      <p class=\"text-lg text-blue-300\">ETH Balance: {{ ethBalance }} ETH</p>\n      <p class=\"text-lg text-blue-300\">WETH Balance: {{ wethBalance }} WETH</p>\n    </div>\n    <div class=\"mb-4\">\n      <input\n        v-model=\"amount\"\n        type=\"number\"\n        step=\"0.01\"\n        min=\"0\"\n        placeholder=\"Amount of ETH to wrap\"\n        class=\"w-full p-2 rounded-lg bg-opacity-20 bg-white backdrop-filter backdrop-blur-lg border border-blue-300 text-blue-500\"\n      />\n    </div>\n    <button\n      @click=\"wrapEth\"\n      class=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition duration-300 ease-in-out transform hover:scale-105\"\n      :disabled=\"isLoading\"\n    >\n      {{ isLoading ? 'Processing...' : 'Wrap ETH' }}\n    </button>\n  </div>\n</template>\n\n<script>\nimport { ethers } from 'ethers'\n\nconst contractAddress = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\nconst contractABI = [\n  {\n    \"name\": \"deposit\",\n    \"stateMutability\": \"payable\",\n    \"inputs\": [],\n    \"outputs\": []\n  },\n  {\n    \"name\": \"balanceOf\",\n    \"stateMutability\": \"view\",\n    \"inputs\": [\n      {\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ]\n  }\n]\n\nexport default {\n  name: 'WETHWrapper',\n  data() {\n    return {\n      amount: '',\n      ethBalance: '0',\n      wethBalance: '0',\n      isLoading: false,\n    }\n  },\n  methods: {\n    async connectWallet() {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.request({ method: 'eth_requestAccounts' })\n          this.provider = new ethers.providers.Web3Provider(window.ethereum)\n          this.signer = this.provider.getSigner()\n          this.contract = new ethers.Contract(contractAddress, contractABI, this.signer)\n          await this.checkNetwork()\n          await this.updateBalances()\n        } catch (error) {\n          console.error('Failed to connect wallet:', error)\n        }\n      } else {\n        console.error('MetaMask is not installed')\n      }\n    },\n    async checkNetwork() {\n      const network = await this.provider.getNetwork()\n      if (network.chainId !== 1) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: '0x1' }],\n          })\n        } catch (error) {\n          console.error('Failed to switch network:', error)\n        }\n      }\n    },\n    async updateBalances() {\n      const address = await this.signer.getAddress()\n      const ethBalance = await this.provider.getBalance(address)\n      this.ethBalance = ethers.utils.formatEther(ethBalance)\n      const wethBalance = await this.contract.balanceOf(address)\n      this.wethBalance = ethers.utils.formatEther(wethBalance)\n    },\n    async wrapEth() {\n      if (!this.signer) {\n        await this.connectWallet()\n      }\n      await this.checkNetwork()\n\n      if (!this.amount || this.amount <= 0) {\n        console.error('Invalid amount')\n        return\n      }\n\n      this.isLoading = true\n      try {\n        const tx = await this.contract.deposit({\n          value: ethers.utils.parseEther(this.amount.toString())\n        })\n        await tx.wait()\n        await this.updateBalances()\n        this.amount = ''\n      } catch (error) {\n        console.error('Error wrapping ETH:', error)\n      } finally {\n        this.isLoading = false\n      }\n    },\n  },\n  mounted() {\n    this.connectWallet()\n  },\n}\n</script>\n"
    },
    "w": 12,
    "h": 7,
    "x": 0,
    "y": 0,
    "i": "0",
    "minW": 3,
    "maxW": 12,
    "minH": 1,
    "moved": false,
    "static": false,
    "isDraggable": true,
    "isResizable": true
}