{
    "id": "simple_header_component_1725441219",
    "name": "simple-header-component",
    "type": "containerComponent",
    "metadata": {
        "markdownText": "\n<template>\n  <div class=\"container mx-auto p-8\">\n    <div class=\"bg-white bg-opacity-10 backdrop-filter backdrop-blur-lg rounded-lg shadow-lg p-8 max-w-md mx-auto\">\n      <h1 class=\"text-3xl font-bold mb-6 text-center text-purple-400\">{{ contractName }} ({{ contractSymbol }})</h1>\n      <div class=\"mb-6\">\n        <label for=\"ethAmount\" class=\"block text-sm font-medium text-gray-300 mb-2\">Amount of ETH to wrap:</label>\n        <input\n          id=\"ethAmount\"\n          v-model=\"ethAmount\"\n          type=\"number\"\n          min=\"0\"\n          step=\"0.01\"\n          class=\"w-full px-3 py-2 bg-gray-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\n          placeholder=\"Enter ETH amount\"\n        >\n      </div>\n      <button\n        @click=\"wrapEth\"\n        class=\"w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-md transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-opacity-50\"\n      >\n        Wrap ETH\n      </button>\n      <div class=\"mt-6 text-center\">\n        <p class=\"text-gray-300\">Your WETH Balance: <span class=\"font-bold text-purple-400\">{{ wethBalance }} WETH</span></p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ethers } from 'ethers';\n\nexport default {\n  name: 'WethWrapper',\n  data() {\n    return {\n      provider: null,\n      signer: null,\n      contract: null,\n      ethAmount: '',\n      wethBalance: '0',\n      contractName: '',\n      contractSymbol: '',\n      contractAddress: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n      chainId: 1,\n      abi: [\n        {\n          \"name\": \"name\",\n          \"stateMutability\": \"view\",\n          \"inputs\": [],\n          \"outputs\": [{\"type\": \"string\"}]\n        },\n        {\n          \"name\": \"symbol\",\n          \"stateMutability\": \"view\",\n          \"inputs\": [],\n          \"outputs\": [{\"type\": \"string\"}]\n        },\n        {\n          \"name\": \"balanceOf\",\n          \"stateMutability\": \"view\",\n          \"inputs\": [{\"type\": \"address\"}],\n          \"outputs\": [{\"type\": \"uint256\"}]\n        },\n        {\n          \"name\": \"deposit\",\n          \"stateMutability\": \"payable\",\n          \"inputs\": [],\n          \"outputs\": []\n        }\n      ]\n    };\n  },\n  methods: {\n    async connectWallet() {\n      try {\n        if (typeof window.ethereum !== 'undefined') {\n          await window.ethereum.request({ method: 'eth_requestAccounts' });\n          this.provider = new ethers.BrowserProvider(window.ethereum);\n          this.signer = await this.provider.getSigner();\n          this.contract = new ethers.Contract(this.contractAddress, this.abi, this.signer);\n          await this.checkNetwork();\n          await this.updateBalance();\n          await this.getContractInfo();\n        } else {\n          throw new Error('Please install MetaMask or another Ethereum wallet');\n        }\n      } catch (error) {\n        console.error('Error connecting wallet:', error);\n      }\n    },\n    async checkNetwork() {\n      const network = await this.provider.getNetwork();\n      if (network.chainId !== BigInt(this.chainId)) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: `0x${this.chainId.toString(16)}` }],\n          });\n        } catch (error) {\n          console.error('Failed to switch network:', error);\n          throw new Error('Please switch to the Ethereum mainnet in your wallet');\n        }\n      }\n    },\n    async updateBalance() {\n      if (this.contract && this.signer) {\n        const address = await this.signer.getAddress();\n        const balance = await this.contract.balanceOf(address);\n        this.wethBalance = ethers.formatEther(balance);\n      }\n    },\n    async getContractInfo() {\n      if (this.contract) {\n        this.contractName = await this.contract.name();\n        this.contractSymbol = await this.contract.symbol();\n      }\n    },\n    async wrapEth() {\n      if (!this.signer) {\n        await this.connectWallet();\n      }\n      await this.checkNetwork();\n\n      try {\n        const tx = await this.contract.deposit({\n          value: ethers.parseEther(this.ethAmount)\n        });\n        await tx.wait();\n        await this.updateBalance();\n        this.ethAmount = '';\n      } catch (error) {\n        console.error('Error wrapping ETH:', error);\n      }\n    }\n  },\n  mounted() {\n    this.connectWallet();\n  }\n};\n</script>\n"
    },
    "w": 10,
    "h": 13,
    "x": 0,
    "y": 0,
    "i": "0",
    "minW": 3,
    "maxW": 12,
    "minH": 1,
    "moved": false,
    "static": false,
    "isDraggable": true,
    "isResizable": true
}