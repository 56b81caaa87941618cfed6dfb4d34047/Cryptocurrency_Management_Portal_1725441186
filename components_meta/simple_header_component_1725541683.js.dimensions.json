{
    "id": "simple_header_component_1725541683",
    "name": "simple-header-component",
    "type": "containerComponent",
    "metadata": {
        "markdownText": "\n<template>\n<div class=\"container mx-auto p-8\">\n<div class=\"bg-white bg-opacity-10 backdrop-filter backdrop-blur-lg rounded-lg shadow-lg p-8 border border-white border-opacity-20\">\n<h1 class=\"text-4xl font-bold mb-8 text-center text-purple-400\">WETH Wrapper</h1>\n<div class=\"mb-6\">\n<p class=\"text-lg text-blue-300\">ETH Balance: {{ ethBalance }} ETH</p>\n<p class=\"text-lg text-green-300\">WETH Balance: {{ wethBalance }} WETH</p>\n</div>\n<div class=\"mb-6\">\n<label class=\"block text-lg text-pink-300 mb-2\" for=\"ethAmount\">Amount of ETH to Wrap:</label>\n<input class=\"w-full p-2 rounded-md bg-gray-800 text-white border border-purple-500 focus:outline-none focus:ring-2 focus:ring-purple-600\" id=\"ethAmount\" min=\"0\" placeholder=\"Enter ETH amount\" step=\"0.000000000000000001\" type=\"number\" v-model=\"ethAmount\"/>\n</div>\n<button @click=\"wrapEth\" class=\"w-full py-3 px-6 text-lg font-semibold text-white bg-gradient-to-r from-purple-500 to-pink-500 rounded-md shadow-md hover:from-purple-600 hover:to-pink-600 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-opacity-50 transform hover:scale-105 transition-all duration-200\">\n        Wrap ETH\n      </button>\n<p class=\"mt-4 text-red-500\" v-if=\"error\">{{ error }}</p>\n</div>\n</div>\n</template>\n<script>\nimport { ethers } from 'ethers';\n\nexport default {\n  name: 'WETHWrapper',\n  data() {\n    return {\n      ethAmount: '',\n      ethBalance: '0',\n      wethBalance: '0',\n      error: '',\n      provider: null,\n      signer: null,\n      contract: null,\n      contractAddress: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n      chainId: 1,\n      abi: [\n        {\n          \"name\": \"deposit\",\n          \"stateMutability\": \"payable\",\n          \"inputs\": [],\n          \"outputs\": []\n        },\n        {\n          \"name\": \"balanceOf\",\n          \"stateMutability\": \"view\",\n          \"inputs\": [\n            {\n              \"name\": \"account\",\n              \"type\": \"address\"\n            }\n          ],\n          \"outputs\": [\n            {\n              \"name\": \"\",\n              \"type\": \"uint256\"\n            }\n          ]\n        }\n      ]\n    };\n  },\n  methods: {\n    async connectWallet() {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.request({ method: 'eth_requestAccounts' });\n          this.provider = new ethers.providers.Web3Provider(window.ethereum);\n          this.signer = this.provider.getSigner();\n          this.contract = new ethers.Contract(this.contractAddress, this.abi, this.signer);\n          await this.checkNetwork();\n          await this.updateBalances();\n        } catch (err) {\n          this.error = 'Failed to connect wallet: ' + err.message;\n        }\n      } else {\n        this.error = 'Please install MetaMask!';\n      }\n    },\n    async checkNetwork() {\n      const network = await this.provider.getNetwork();\n      if (network.chainId !== this.chainId) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: ethers.utils.hexValue(this.chainId) }],\n          });\n        } catch (err) {\n          this.error = 'Please switch to the Ethereum mainnet';\n        }\n      }\n    },\n    async updateBalances() {\n      try {\n        const address = await this.signer.getAddress();\n        const ethBalance = await this.provider.getBalance(address);\n        this.ethBalance = ethers.utils.formatEther(ethBalance);\n        \n        const wethBalance = await this.contract.balanceOf(address);\n        this.wethBalance = ethers.utils.formatEther(wethBalance);\n      } catch (err) {\n        this.error = 'Failed to update balances: ' + err.message;\n      }\n    },\n    async wrapEth() {\n      if (!this.signer) {\n        await this.connectWallet();\n      }\n      \n      if (!this.ethAmount || this.ethAmount <= 0) {\n        this.error = 'Please enter a valid amount';\n        return;\n      }\n      \n      try {\n        const tx = await this.contract.deposit({\n          value: ethers.utils.parseEther(this.ethAmount)\n        });\n        await tx.wait();\n        await this.updateBalances();\n        this.ethAmount = '';\n        this.error = '';\n      } catch (err) {\n        this.error = 'Failed to wrap ETH: ' + err.message;\n      }\n    }\n  },\n  mounted() {\n    this.connectWallet();\n  }\n};\n</script>\n"
    },
    "w": 7,
    "h": 16,
    "x": 0,
    "y": 32,
    "i": "2",
    "minW": 3,
    "maxW": 12,
    "minH": 1,
    "moved": false,
    "static": false,
    "isDraggable": true,
    "isResizable": true
}