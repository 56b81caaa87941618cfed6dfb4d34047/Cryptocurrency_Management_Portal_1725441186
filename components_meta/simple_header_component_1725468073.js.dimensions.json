{
    "id": "simple_header_component_1725468073",
    "name": "simple-header-component",
    "type": "containerComponent",
    "metadata": {
        "markdownText": "\n<template>\n<div class=\"container mx-auto p-8 bg-opacity-30 bg-white backdrop-filter backdrop-blur-lg rounded-xl shadow-lg\">\n<h1 class=\"text-4xl font-bold mb-8 text-center text-purple-500\">WETH Wrapper</h1>\n<div class=\"mb-6\">\n<p class=\"text-lg mb-2 text-blue-400\">Your ETH Balance: {{ ethBalance }} ETH</p>\n<p class=\"text-lg mb-4 text-green-400\">Your WETH Balance: {{ wethBalance }} WETH</p>\n</div>\n<div class=\"mb-6\">\n<label class=\"block text-lg mb-2 text-pink-500\" for=\"amount\">Amount of ETH to wrap:</label>\n<input class=\"w-full p-2 rounded-lg bg-opacity-50 bg-white backdrop-filter backdrop-blur-sm border border-purple-300 focus:border-purple-500 focus:ring focus:ring-purple-200\" id=\"amount\" min=\"0\" step=\"0.000000000000000001\" type=\"number\" v-model=\"amount\"/>\n</div>\n<button @click=\"wrapEth\" class=\"w-full py-3 px-6 text-white bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg shadow-md hover:from-purple-600 hover:to-pink-600 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-opacity-50 transition duration-300\">\n      Wrap ETH\n    </button>\n<p class=\"mt-4 text-red-500\" v-if=\"error\">{{ error }}</p>\n<p class=\"mt-4 text-green-500\" v-if=\"success\">{{ success }}</p>\n</div>\n</template>\n<script>\nimport { ethers } from 'ethers'\n\nexport default {\n  name: 'WethWrapper',\n  data() {\n    return {\n      provider: null,\n      signer: null,\n      contract: null,\n      ethBalance: '0',\n      wethBalance: '0',\n      amount: '',\n      error: '',\n      success: '',\n      contractAddress: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n      chainId: 1,\n      abi: [\n        {\n          \"name\": \"deposit\",\n          \"stateMutability\": \"payable\",\n          \"inputs\": [],\n          \"outputs\": []\n        },\n        {\n          \"name\": \"balanceOf\",\n          \"stateMutability\": \"view\",\n          \"inputs\": [\n            { \"type\": \"address\" }\n          ],\n          \"outputs\": [\n            { \"type\": \"uint256\" }\n          ]\n        }\n      ]\n    }\n  },\n  methods: {\n    async connectWallet() {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.request({ method: 'eth_requestAccounts' })\n          this.provider = new ethers.providers.Web3Provider(window.ethereum)\n          this.signer = this.provider.getSigner()\n          this.contract = new ethers.Contract(this.contractAddress, this.abi, this.signer)\n          await this.checkNetwork()\n          await this.updateBalances()\n        } catch (err) {\n          this.error = 'Failed to connect wallet: ' + err.message\n        }\n      } else {\n        this.error = 'Please install MetaMask!'\n      }\n    },\n    async checkNetwork() {\n      const network = await this.provider.getNetwork()\n      if (network.chainId !== this.chainId) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: '0x' + this.chainId.toString(16) }],\n          })\n        } catch (err) {\n          this.error = 'Please switch to the Ethereum mainnet'\n          throw new Error('Incorrect network')\n        }\n      }\n    },\n    async updateBalances() {\n      const address = await this.signer.getAddress()\n      const ethBalance = await this.provider.getBalance(address)\n      this.ethBalance = ethers.utils.formatEther(ethBalance)\n      const wethBalance = await this.contract.balanceOf(address)\n      this.wethBalance = ethers.utils.formatEther(wethBalance)\n    },\n    async wrapEth() {\n      this.error = ''\n      this.success = ''\n      if (!this.signer) {\n        await this.connectWallet()\n      }\n      try {\n        await this.checkNetwork()\n        const amountWei = ethers.utils.parseEther(this.amount)\n        const tx = await this.contract.deposit({ value: amountWei })\n        await tx.wait()\n        this.success = `Successfully wrapped ${this.amount} ETH to WETH!`\n        await this.updateBalances()\n        this.amount = ''\n      } catch (err) {\n        this.error = 'Failed to wrap ETH: ' + err.message\n      }\n    }\n  },\n  mounted() {\n    this.connectWallet()\n  }\n}\n</script>\n"
    },
    "w": 12,
    "h": 12,
    "x": 0,
    "y": 9,
    "i": "1",
    "minW": 3,
    "maxW": 12,
    "minH": 1,
    "moved": false,
    "static": false,
    "isDraggable": true,
    "isResizable": true
}