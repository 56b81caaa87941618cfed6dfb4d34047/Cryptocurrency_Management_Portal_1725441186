{
    "id": "contact_form_1725605000",
    "name": "contact-form",
    "type": "containerComponent",
    "metadata": {
        "markdownText": "\n<template>\n<div class=\"container mx-auto p-8\">\n<div class=\"bg-white bg-opacity-10 backdrop-filter backdrop-blur-lg rounded-lg shadow-lg p-6 border border-white border-opacity-20\">\n<h1 class=\"text-3xl font-bold mb-6 text-purple-400\">WETH Wrapper</h1>\n<div class=\"mb-4\">\n<p class=\"text-white mb-2\">ETH Balance: {{ ethBalance }} ETH</p>\n<p class=\"text-white mb-4\">WETH Balance: {{ wethBalance }} WETH</p>\n</div>\n<div class=\"mb-6\">\n<input class=\"w-full p-2 rounded bg-gray-800 text-white border border-purple-500 focus:outline-none focus:ring-2 focus:ring-purple-600\" min=\"0\" placeholder=\"Amount of ETH to wrap\" step=\"0.000000000000000001\" type=\"number\" v-model=\"amount\"/>\n</div>\n<button @click=\"wrapEth\" class=\"w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline transform transition hover:scale-105\">\n        Wrap ETH\n      </button>\n</div>\n</div>\n</template>\n<script>\nimport { ethers } from 'ethers'\n\nexport default {\n  name: 'WethWrapper',\n  data() {\n    return {\n      amount: '',\n      ethBalance: '0',\n      wethBalance: '0',\n      contract: null,\n      signer: null,\n      provider: null,\n    }\n  },\n  methods: {\n    async connectWallet() {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.request({ method: 'eth_requestAccounts' })\n          this.provider = new ethers.providers.Web3Provider(window.ethereum)\n          this.signer = this.provider.getSigner()\n          \n          const network = await this.provider.getNetwork()\n          if (network.chainId !== 1) {\n            await window.ethereum.request({\n              method: 'wallet_switchEthereumChain',\n              params: [{ chainId: '0x1' }],\n            })\n          }\n          \n          this.initContract()\n          this.updateBalances()\n        } catch (error) {\n          console.error('Failed to connect wallet:', error)\n        }\n      } else {\n        console.error('MetaMask is not installed')\n      }\n    },\n    initContract() {\n      const contractAddress = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n      const abi = [\n        {\n          \"name\": \"deposit\",\n          \"stateMutability\": \"payable\",\n          \"inputs\": [],\n          \"outputs\": []\n        },\n        {\n          \"name\": \"balanceOf\",\n          \"stateMutability\": \"view\",\n          \"inputs\": [{\"type\": \"address\"}],\n          \"outputs\": [{\"type\": \"uint256\"}]\n        }\n      ]\n      this.contract = new ethers.Contract(contractAddress, abi, this.signer)\n    },\n    async updateBalances() {\n      const address = await this.signer.getAddress()\n      const ethBalance = await this.provider.getBalance(address)\n      this.ethBalance = ethers.utils.formatEther(ethBalance)\n      \n      const wethBalance = await this.contract.balanceOf(address)\n      this.wethBalance = ethers.utils.formatEther(wethBalance)\n    },\n    async wrapEth() {\n      if (!this.signer) {\n        await this.connectWallet()\n      }\n      \n      try {\n        const amountWei = ethers.utils.parseEther(this.amount)\n        const tx = await this.contract.deposit({ value: amountWei })\n        await tx.wait()\n        this.updateBalances()\n        this.amount = ''\n      } catch (error) {\n        console.error('Error wrapping ETH:', error)\n      }\n    }\n  },\n  mounted() {\n    this.connectWallet()\n  }\n}\n</script>\n"
    },
    "w": 7,
    "h": 11,
    "x": 5,
    "y": 0,
    "i": "5",
    "minW": 3,
    "maxW": 12,
    "minH": 1,
    "moved": false,
    "static": false,
    "isDraggable": true,
    "isResizable": true
}